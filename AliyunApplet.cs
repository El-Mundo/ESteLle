using System;
using System.Collections.Generic;
using System.Windows.Media.Imaging;
using AlibabaCloud.SDK.VIAPI.Utils;
using static AlibabaCloud.SDK.Imageseg20191230.Models.SegmentFaceResponseBody.SegmentFaceResponseBodyData;

/// <summary>
/// Summary description for Class1
/// </summary>
public class AliyunApplet
{
    public static AliyunApplet instance;

    /// <summary>
    /// Safety attributes generated by Aliyun.
    /// </summary>
    private string key, secret, ossEndpoint, ossBucket;

    private AlibabaCloud.SDK.Imageseg20191230.Client segmentClient;
    private Aliyun.OSS.OssClient ossClient;
    /// <summary>
    /// The local path of the last image uploaded to Aliyun.
    /// </summary>
    private string targetImage;
    /// <summary>
    /// The last Aliyun-Shanghai url generated by this Applet.
    /// </summary>
    public string imageUrl;
    /// <summary>
    /// The last Aliyun Body/Skin Segmentation image generated by this Applet.
    /// </summary>
    public string bodySegUrl, skinSegUrl;

	public AliyunApplet(string key, string secret)
	{
        this.key = key;   // AccessKeyID here
        this.secret = secret;   // AccessKeySecret here

        segmentClient = CreateClient(key, secret);
    }

    public void SetOSSEndpoint(string endpoint, string bucket)
    {
        ossEndpoint = endpoint;
        ossBucket = bucket;
        ossClient = new Aliyun.OSS.OssClient(endpoint, key, secret);
    }

    /// <summary>
    /// Convert a local uri to Aliyun-Shanghai URL,
    /// the standard input format expected by the Aliyun Computer Vision API.
    /// </summary>
    /// <param name="localUri"> The URI to be converted. Can be on the local storage or internet.</param>
    /// <param name="path"> The pointer where the converted path will be recorded.</param>
    /// <returns> The Aliyun-Shanghai URL when returning true, or an error message with false returned if the conversion failed. </returns>
    public bool LocalUriImageToAliyunUrl(string localUri, out string path)
    {
        if(ossClient != null)
        {
            this.targetImage = localUri;

            try
            {
                System.IO.FileInfo fInfo = new System.IO.FileInfo(localUri);
                if (!fInfo.Exists) throw new Exception("Cannot acces local file.");
                path = UploadFileToOSS(fInfo.FullName, fInfo.Name);
                this.imageUrl = path;
                return true;
            }
            catch (Exception e)
            {
                path = e.Message;
                return false;
            }
        }
        else
        {
            this.targetImage = localUri;

            try
            {
                FileUtils fileobj = FileUtils.getInstance(key, secret);
                path = fileobj.Upload(localUri);
                this.imageUrl = path;
                return true;
            }
            catch (Exception e)
            {
                path = e.Message;
                return false;
            }
        }
    }

    public static AlibabaCloud.SDK.Imageseg20191230.Client CreateClient(string accessKeyId, string accessKeySecret)
    {
        AlibabaCloud.OpenApiClient.Models.Config config = new AlibabaCloud.OpenApiClient.Models.Config
        {
            AccessKeyId = accessKeyId,
            AccessKeySecret = accessKeySecret,
        };
        config.Endpoint = "imageseg.cn-shanghai.aliyuncs.com";
        return new AlibabaCloud.SDK.Imageseg20191230.Client(config);
    }

    /// <summary>
    /// Request Aliyun to process the image with body segmentation.
    /// </summary>
    /// <param name="imageUrl">The Aliyun-Shanghai URL of the image.</param>
    public BitmapImage RequestBodySegmentation(string imageUrl)
    {
        AlibabaCloud.SDK.Imageseg20191230.Models.SegmentHDBodyRequest segmentHDBodyRequest = 
            new AlibabaCloud.SDK.Imageseg20191230.Models.SegmentHDBodyRequest();
        AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
        segmentHDBodyRequest.ImageURL = imageUrl;

        AlibabaCloud.SDK.Imageseg20191230.Models.SegmentHDBodyResponse response = 
            segmentClient.SegmentHDBodyWithOptions(segmentHDBodyRequest, runtime);

        bodySegUrl = response.Body.Data.ImageURL;

        BitmapImage output = new BitmapImage();
        output.BeginInit();
        output.UriSource = new Uri(bodySegUrl);
        output.EndInit();
        EsteLle.UserCentre.WaitBitmapDownloading(output);

        return output;
    }

    /// <summary>
    /// Request Aliyun to process the image with skin segmentation.
    /// </summary>
    /// <param name="imageUrl">The Aliyun-Shanghai URL of the image.</param>
    public BitmapImage RequestSkinSegmentation(string imageUrl)
    {
        AlibabaCloud.SDK.Imageseg20191230.Models.SegmentSkinRequest segmentSkinRequest = 
            new AlibabaCloud.SDK.Imageseg20191230.Models.SegmentSkinRequest();
        AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();
        segmentSkinRequest.URL = imageUrl;

        AlibabaCloud.SDK.Imageseg20191230.Models.SegmentSkinResponse response =
            segmentClient.SegmentSkinWithOptions(segmentSkinRequest, runtime);

        skinSegUrl = response.Body.Data.URL;

        BitmapImage output = new BitmapImage();
        output.BeginInit();
        output.UriSource = new Uri(skinSegUrl);
        output.EndInit();
        EsteLle.UserCentre.WaitBitmapDownloading(output);
        return output;
    }

    public List<BitmapImage> RequestFaceSegmentation(string imageUrl)
    {
        AlibabaCloud.SDK.Imageseg20191230.Models.SegmentFaceRequest segmentFaceRequest =
            new AlibabaCloud.SDK.Imageseg20191230.Models.SegmentFaceRequest();
        AlibabaCloud.TeaUtil.Models.RuntimeOptions runtime = new AlibabaCloud.TeaUtil.Models.RuntimeOptions();

        segmentFaceRequest.ImageURL = imageUrl;
        AlibabaCloud.SDK.Imageseg20191230.Models.SegmentFaceResponse response =
            segmentClient.SegmentFaceWithOptions(segmentFaceRequest, runtime);

        List<SegmentFaceResponseBodyDataElements> elements = response.Body.Data.Elements;

        List<BitmapImage> output = new List<BitmapImage>();
        foreach(SegmentFaceResponseBodyDataElements e in elements)
        {
            output.Add(new BitmapImage(new Uri(e.ImageURL)));
            EsteLle.UserCentre.Print($"New face detected at {e.X}:{e.Y}, size {e.Width}:{e.Height}.");
        }
        return output;
    }

    private string UploadFileToOSS(string fileAbsPath, string name)
    {
        try
        {
            if(name.Contains(" "))
            {
                name = name.Replace(' ', '-');
            }
            string tar = "images/" + name;
            Aliyun.OSS.PutObjectResult result = ossClient.PutObject(ossBucket, tar, fileAbsPath);
            EsteLle.UserCentre.Print($"Put object:{tar} succeeded.");

            string url = $"http://{ossBucket}.{ossEndpoint}/{tar}";
            EsteLle.UserCentre.Print("Uploaded to OSS:\n" + url);
            return url;
        }
        catch (Aliyun.OSS.Common.OssException ex)
        {
            EsteLle.UserCentre.Print($"Failed with error code: {ex.ErrorCode}; Error info: {ex.Message}. \nRequestID:{ex.RequestId}\tHostID:{ex.HostId}");
            return "";
        }
        catch (Exception ex)
        {
            EsteLle.UserCentre.Print($"Failed with error info: {ex.Message}");
            return "";
        }
    }

}
